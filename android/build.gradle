group = "com.orderfast"
version = "1.0-SNAPSHOT"

// Load local.properties file
def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")

if (localPropertiesFile.exists()) {
    localPropertiesFile.withInputStream { stream ->
        localProperties.load(stream)
    }
}


def flutterRoot = localProperties.getProperty('flutter.sdk')


buildscript {
    ext.kotlin_version = "1.8.22"
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:8.1.0")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()


        maven {
            url "https://artifactory.easygoband.rocks/artifactory/egb"
            credentials {
                username = localProperties.getProperty("artifactory_user") ?: ""
                password = localProperties.getProperty("artifactory_password") ?: ""
            }
        }

    }
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"


android {
    if (project.android.hasProperty("namespace")) {
        namespace = "com.orderfast"
    }

    compileSdk = 34

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
    }

    defaultConfig {
        minSdk = 21
    }

    dependencies {
        testImplementation("org.jetbrains.kotlin:kotlin-test")
        testImplementation("org.mockito:mockito-core:5.0.0")

        implementation('com.easygoband.toolkit.sdk:android:4.0.0')


    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }
}

